// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package queue is a generated GoMock package.
package queue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	dynamicconfig "github.com/uber/cadence/common/dynamicconfig"
	invariant "github.com/uber/cadence/common/reconciliation/invariant"
	engine "github.com/uber/cadence/service/history/engine"
	execution "github.com/uber/cadence/service/history/execution"
	reset "github.com/uber/cadence/service/history/reset"
	shard "github.com/uber/cadence/service/history/shard"
	task "github.com/uber/cadence/service/history/task"
	workflowcache "github.com/uber/cadence/service/history/workflowcache"
	archiver "github.com/uber/cadence/service/worker/archiver"
)

// MockProcessorFactory is a mock of ProcessorFactory interface.
type MockProcessorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorFactoryMockRecorder
}

// MockProcessorFactoryMockRecorder is the mock recorder for MockProcessorFactory.
type MockProcessorFactoryMockRecorder struct {
	mock *MockProcessorFactory
}

// NewMockProcessorFactory creates a new mock instance.
func NewMockProcessorFactory(ctrl *gomock.Controller) *MockProcessorFactory {
	mock := &MockProcessorFactory{ctrl: ctrl}
	mock.recorder = &MockProcessorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorFactory) EXPECT() *MockProcessorFactoryMockRecorder {
	return m.recorder
}

// NewCrossClusterQueueProcessor mocks base method.
func (m *MockProcessorFactory) NewCrossClusterQueueProcessor(shard shard.Context, historyEngine engine.Engine, executionCache execution.Cache, taskProcessor task.Processor) Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCrossClusterQueueProcessor", shard, historyEngine, executionCache, taskProcessor)
	ret0, _ := ret[0].(Processor)
	return ret0
}

// NewCrossClusterQueueProcessor indicates an expected call of NewCrossClusterQueueProcessor.
func (mr *MockProcessorFactoryMockRecorder) NewCrossClusterQueueProcessor(shard, historyEngine, executionCache, taskProcessor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCrossClusterQueueProcessor", reflect.TypeOf((*MockProcessorFactory)(nil).NewCrossClusterQueueProcessor), shard, historyEngine, executionCache, taskProcessor)
}

// NewTimerQueueProcessor mocks base method.
func (m *MockProcessorFactory) NewTimerQueueProcessor(shard shard.Context, historyEngine engine.Engine, taskProcessor task.Processor, executionCache execution.Cache, archivalClient archiver.Client, executionCheck invariant.Invariant) Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimerQueueProcessor", shard, historyEngine, taskProcessor, executionCache, archivalClient, executionCheck)
	ret0, _ := ret[0].(Processor)
	return ret0
}

// NewTimerQueueProcessor indicates an expected call of NewTimerQueueProcessor.
func (mr *MockProcessorFactoryMockRecorder) NewTimerQueueProcessor(shard, historyEngine, taskProcessor, executionCache, archivalClient, executionCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimerQueueProcessor", reflect.TypeOf((*MockProcessorFactory)(nil).NewTimerQueueProcessor), shard, historyEngine, taskProcessor, executionCache, archivalClient, executionCheck)
}

// NewTransferQueueProcessor mocks base method.
func (m *MockProcessorFactory) NewTransferQueueProcessor(shard shard.Context, historyEngine engine.Engine, taskProcessor task.Processor, executionCache execution.Cache, workflowResetter reset.WorkflowResetter, archivalClient archiver.Client, executionCheck invariant.Invariant, wfIDCache workflowcache.WFCache, ratelimitInternalPerWorkflowID dynamicconfig.BoolPropertyFnWithDomainFilter) Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransferQueueProcessor", shard, historyEngine, taskProcessor, executionCache, workflowResetter, archivalClient, executionCheck, wfIDCache, ratelimitInternalPerWorkflowID)
	ret0, _ := ret[0].(Processor)
	return ret0
}

// NewTransferQueueProcessor indicates an expected call of NewTransferQueueProcessor.
func (mr *MockProcessorFactoryMockRecorder) NewTransferQueueProcessor(shard, historyEngine, taskProcessor, executionCache, workflowResetter, archivalClient, executionCheck, wfIDCache, ratelimitInternalPerWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransferQueueProcessor", reflect.TypeOf((*MockProcessorFactory)(nil).NewTransferQueueProcessor), shard, historyEngine, taskProcessor, executionCache, workflowResetter, archivalClient, executionCheck, wfIDCache, ratelimitInternalPerWorkflowID)
}
