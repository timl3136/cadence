steps:
  - label: "fossa analyze"
    agents:
      queue: "init"
      docker: "*"
    command: "./scripts/buildkite/fossa.sh"
  - label: ":golang: unit test"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "CASSANDRA_HOST=cassandra make install-schema && make cover_profile" # make install-schema is needed for a server startup test. See main_test.go
      - "./scripts/buildkite/gen_coverage_metadata.sh .build/coverage/metadata.txt"
    artifact_paths:
      - ".build/coverage/*.out"
      - ".build/coverage/metadata.txt"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: unit-test
          config: docker/buildkite/docker-compose.yml

  - label: ":lint: validate code is clean"
    agents:
      queue: "workers"
      docker: "*"
    command: "./scripts/buildkite/golint.sh"
    artifact_paths: []
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: coverage-report
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration test with cassandra"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_integration_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-cassandra
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration test with cassandra with ElasticSearch V7"
    agents:
      queue: "workers"
      docker: "*"
    command:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_integration_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-cassandra
          config: docker/buildkite/docker-compose-es7.yml

  - label: ":golang: integration test with cassandra with OpenSearch v2"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_integration_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-cassandra
          config: docker/buildkite/docker-compose-opensearch2.yml

  - label: ":golang: integration ndc test with cassandra"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_ndc_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-ndc-cassandra
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration test with mysql"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_integration_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-mysql
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration ndc test with mysql"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_ndc_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-ndc-mysql
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration test with postgres"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_integration_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-postgres
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: integration ndc test with postgres"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "make cover_ndc_profile"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-ndc-postgres
          config: docker/buildkite/docker-compose.yml

  - label: ":golang: async wf integration test with kafka"
    agents:
      queue: "workers"
      docker: "*"
    commands:
      - "make .just-build" # ensure that we are not rebuilding binaries and not regenerating code
      - "go test -timeout 60s -run ^TestAsyncWFIntegrationSuite -tags asyncwfintegration -count 1 -v github.com/uber/cadence/host"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.0.0:
          run: integration-test-async-wf
          config: docker/buildkite/docker-compose.yml

  - wait

  - label: ":golang: code-coverage"
    agents:
      queue: "workers"
      docker: "*"
    command: "scripts/buildkite/gocov.sh"
    retry:
      automatic:
        limit: 2
    plugins:
      - docker-compose#v3.0.0:
          run: coverage-report
          config: docker/buildkite/docker-compose.yml

  - label: ":docker: build (no push)"
    agents:
      queue: "workers"
      docker: "*"
    command: "scripts/buildkite/docker-build.sh"
    retry:
      automatic:
        limit: 1
